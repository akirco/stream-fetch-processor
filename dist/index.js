var c=Object.defineProperty;var l=(o,e,r)=>e in o?c(o,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):o[e]=r;var a=(o,e,r)=>(l(o,typeof e!="symbol"?e+"":e,r),r);var n=class{constructor(e={}){a(this,"decoder");a(this,"reader");a(this,"controller");a(this,"response",null);this.decoder=e.decoder??new TextDecoder("utf-8"),this.controller=new AbortController,this.reader=null}async fetchData(e,r,s=3){try{let t=await fetch(e,{...r,signal:this.controller.signal});if(!t.ok)throw new Error(`Response error: ${t.status} ${t.statusText}`);return t.ok&&(this.response=t),t}catch(t){if(s>0)return this.fetchData(e,r,s-1);throw new Error(`Failed to fetch: ${t}`)}}async read(e){if(!this.response&&!e)throw new Error("No response available");try{if(this.reader=(e??this.response)?.body?.getReader(),this.reader){let{done:r,value:s}=await this.reader.read(),t=this.decoder.decode(s);return{done:r,value:t}}else return{done:!0,value:""}}catch(r){throw this.reader?.cancel(),new Error(`Failed to read: ${r}`)}finally{this.reader?.releaseLock(),this.response?.body?.cancel(),e?.body?.cancel()}}cancel(){this.reader?.cancel(),this.controller.abort()}};export{n as default};
